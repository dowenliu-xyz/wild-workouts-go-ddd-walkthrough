/* tslint:disable */
/* eslint-disable */
/**
 * Wild Workouts trainer
 * TODO
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Hour
 */
export interface Hour {
    /**
     * 
     * @type {string}
     * @memberof Hour
     */
    'hour': string;
    /**
     * 
     * @type {boolean}
     * @memberof Hour
     */
    'available': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Hour
     */
    'hasTrainingScheduled': boolean;
}
/**
 * 
 * @export
 * @interface HourUpdate
 */
export interface HourUpdate {
    /**
     * 
     * @type {Array<string>}
     * @memberof HourUpdate
     */
    'hours': Array<string>;
}
/**
 * 
 * @export
 * @interface ModelDate
 */
export interface ModelDate {
    /**
     * 
     * @type {string}
     * @memberof ModelDate
     */
    'date': string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelDate
     */
    'hasFreeHours': boolean;
    /**
     * 
     * @type {Array<Hour>}
     * @memberof ModelDate
     */
    'hours': Array<Hour>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} dateFrom 
         * @param {string} dateTo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainerAvailableHours: async (dateFrom: string, dateTo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dateFrom' is not null or undefined
            assertParamExists('getTrainerAvailableHours', 'dateFrom', dateFrom)
            // verify required parameter 'dateTo' is not null or undefined
            assertParamExists('getTrainerAvailableHours', 'dateTo', dateTo)
            const localVarPath = `/trainer/calendar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (dateFrom !== undefined) {
                localVarQueryParameter['dateFrom'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['dateTo'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HourUpdate} hourUpdate todo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeHourAvailable: async (hourUpdate: HourUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hourUpdate' is not null or undefined
            assertParamExists('makeHourAvailable', 'hourUpdate', hourUpdate)
            const localVarPath = `/trainer/calendar/make-hour-available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hourUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HourUpdate} hourUpdate todo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeHourUnavailable: async (hourUpdate: HourUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hourUpdate' is not null or undefined
            assertParamExists('makeHourUnavailable', 'hourUpdate', hourUpdate)
            const localVarPath = `/trainer/calendar/make-hour-unavailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hourUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} dateFrom 
         * @param {string} dateTo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrainerAvailableHours(dateFrom: string, dateTo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrainerAvailableHours(dateFrom, dateTo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {HourUpdate} hourUpdate todo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeHourAvailable(hourUpdate: HourUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeHourAvailable(hourUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {HourUpdate} hourUpdate todo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeHourUnavailable(hourUpdate: HourUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeHourUnavailable(hourUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {string} dateFrom 
         * @param {string} dateTo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainerAvailableHours(dateFrom: string, dateTo: string, options?: any): AxiosPromise<Array<ModelDate>> {
            return localVarFp.getTrainerAvailableHours(dateFrom, dateTo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HourUpdate} hourUpdate todo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeHourAvailable(hourUpdate: HourUpdate, options?: any): AxiosPromise<Array<ModelDate>> {
            return localVarFp.makeHourAvailable(hourUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HourUpdate} hourUpdate todo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeHourUnavailable(hourUpdate: HourUpdate, options?: any): AxiosPromise<Array<ModelDate>> {
            return localVarFp.makeHourUnavailable(hourUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {string} dateFrom 
     * @param {string} dateTo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTrainerAvailableHours(dateFrom: string, dateTo: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTrainerAvailableHours(dateFrom, dateTo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HourUpdate} hourUpdate todo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public makeHourAvailable(hourUpdate: HourUpdate, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).makeHourAvailable(hourUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HourUpdate} hourUpdate todo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public makeHourUnavailable(hourUpdate: HourUpdate, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).makeHourUnavailable(hourUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


